// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  email      String?  @unique
  password   String?
  phone      String?  @unique
  github_id  String?  @unique
  avatar     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  SMSToken   SMSToken[]
  Product    Product[]
  Post       Post[]
  Comment    Comment[]
  Like       Like[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Product {
  id        Int      @id @default(autoincrement())
  title     String 
  price     Float
  description String 
  photo     String 
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model Post {
  id Int @id @default(autoincrement())
  title String 
  description String?
  views Int @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comments  Comment[]
  likes    Like[]
}

model Comment {
  id Int @id @default(autoincrement())
  payload String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int 
  postId Int 
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int 
  postId Int 
  @@id(name: "id", [userId, postId])
} 

